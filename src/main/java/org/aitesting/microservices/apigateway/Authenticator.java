package org.aitesting.microservices.apigateway;

import java.security.GeneralSecurityException;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

/**
 *
 * @author Juan
 */
public class Authenticator {

    private static final Authenticator authenticator = new Authenticator();

    // An authentication token storage which stores <service_key, auth_token>.
    private static Map<String, String> authorizationTokensStorage = new HashMap<String, String>();

    private Authenticator() {
        /**
         * Service keys are pre-generated by the system and is given to the
         * authorized client who wants to have access to the REST API. Here,
         * only username1 and username2 is given the REST service access with
         * their respective service keys.
         */
        //serviceKeysStorage.put("f80ebc87-ad5c-4b29-9366-5359768df5a1", "username1");
        //serviceKeysStorage.put("3b91cab8-926f-49b6-ba00-920bcf934c2a", "username2");
    }

    public static Authenticator getInstance() {
        /*if (authenticator == null) {
            authenticator = new Authenticator();
        }*/

        return authenticator;
    }

    public String checkin(String username) /*throws LoginException*/ {
    	
        //if (!authorizationTokensStorage.containsValue(username)) {
            String authToken = UUID.randomUUID().toString();
            authorizationTokensStorage.put(authToken, username);
            return authToken;
        //}

        //throw new LoginException("LoginException");
    }

    /**
     * The method that pre-validates if the client which invokes the REST API is
     * from a authorized and authenticated source.
     *
     * @param username
     * @param authToken The authorization token generated after login
     * @return TRUE for acceptance and FALSE for denied.
     */
    public boolean isAuthTokenValid(String authToken, String username) {

        if (authorizationTokensStorage.containsKey(authToken)
                && authorizationTokensStorage.get(authToken).equals(username)) {
            return true;
        }

        return false;
    }
    
    public boolean isUserValid(String username){
        return authorizationTokensStorage.containsValue(username);
    }
    
    /**
     * Remove all the value pairs that matches with value == username
     * 
     * @param username
     * @param authToken
     * @throws GeneralSecurityException
     */
    public void checkout(String username, String authToken) throws GeneralSecurityException {
    	
        if (authorizationTokensStorage.containsKey(authToken)) {

            /**
             * When a client logs out, the authentication token will be remove
             * and will be made invalid.
             */
            authorizationTokensStorage.remove(authToken);
            return;
        }

        throw new GeneralSecurityException("Invalid service key and authorization token match.");
    }

}

